{"meta":{"title":"zhp's blog","subtitle":null,"description":null,"author":"张浩鹏","url":"http://yoursite.com","root":"/"},"pages":[],"posts":[{"title":"","slug":"My-New-Post","date":"2019-03-22T02:38:00.350Z","updated":"2019-03-27T09:02:39.205Z","comments":true,"path":"2019/03/22/My-New-Post/","link":"","permalink":"http://yoursite.com/2019/03/22/My-New-Post/","excerpt":"title: C#考试重点date: 2019-03-22 10:38:00tags:C#content:","text":"title: C#考试重点date: 2019-03-22 10:38:00tags:C#content:类型转换数组的定义 一维二维数组定义使用字符串的处理 查找字符串出现例如Length属性和Copy、IndexOf、LastIndexOf、Insert、Remove、Replace、Split、Substring、Trim等方法，分别用来获得字符串长度、复制字符串、从左边查找字符、从右边查找字符、插入字符、删除字符、替换字符、分割字符串、取子字符串、压缩字符串的空白等操作。System.Text.StringBuilder类用来构造可变字符串，包含Length、Append、Insert、Remove、Replace、ToString等成员，分别用来获得字符串长度、追加字符、删除字符、替换字符和将StringBuilder转换成string等操作 常用控件 Label属性： AutoSize（自动尺寸） BorderStyle（边框） Enabled（可用） Visible（可见） TextAlign（文本排列） Name（名称） AutoSize（自动尺寸） BackColor（背景色） BorderStyle（边框） Enabled（可用） Visible（可见） Font（字体） ForeColor（前景色） Image（图像） Location（位置） Locked（锁定） Size（尺寸） Text（文本） TextAlign（文本排列） 等 button： 快捷键 字母前+&amp; 可使用Alt+调用 单击按钮过程中 事件发生顺序 MouseEnter MouseMove MouseDown MouseClick MouseUp MouseMove MouseLeave textbox ： BorderStyle（边框） Enabled（可用） Visible（可见） TextAlign（文本排列）BackColor（背景色） Name（名称） Font（字体） ForeColor（前景色 ) Location（位置） Locked（锁定） Size（尺寸） Text（文本） MaxLength(最大长度） Multiline（多行） PasswordChar（密码字符*） ReadOnly（只读）ScrollBars （滚动条） SelectedText（选定的文本） TextLength（文本长度）WordWrap(文本换行) 常用方法：AppendText（追加文本） Paste（粘贴）Select（选择指定范围文本） SelectAll（全选） TextChanged（文本更改） Application.Exit();退出 picturebox 图像显示模式 图片框特有的属性SizeMode 拉伸 ： StretchImage 居中： CenterImage Normal 自动裁剪放于左上角 AutoSize 根据图片大小调PictureBox Zoom:按原比例增加缩小 RadioButton: 单选按钮 属性 Checked（是否被选中） 常用事件是CheckedChanged和ClickCheckBox：复选框 常用属性有AutoCheck（自动选择）、 CheckAlign（选框位置）、Checked（是否选中）、CheckState（选择状态）和ThreeState（是否允许三种状态） CheckedChanged和Click事件，但使用最多的是CheckStateChanged事件 遍历控件里的所有控件 （GroupBox） 菜单： foreach (Control c in groupBox1.Controls){ if (c is TextBox) { //这里写代码逻辑 }} ListBox 列表框 常用事件 Click DoubleClick 和SelectedIndexChanged 列表框中的项目列表是Items属性的值 使用Items属性来增删改ComboBox 组合框 （下拉） 大概与ListBox类似 窗体 常用方法 Hide Show Close ShowDialog（以模式化显示窗体） 事件 Load(加载时发生) Click（点击空白位置发生）Activated（活动窗体时发生） Deactivate（不活动窗体时发生） 还未关闭之前Formclosing 关闭之后Formclosed StatusStrip（状态栏）ToolStrip（工具栏） 常用组件： ImageList（图像列表）常用属性 Images 计时器 Timer （自动周期性的触发某一事件）常用属性有Name、Interval（间隔）和Enabled。只有一个事件，即Tick事件。 ProgressBar （进度条） 菜单种类 ContextMenuStrip（弹出式菜单）是窗体内的浮动菜单，用鼠标右击窗体或控件时才显示 不必设计主菜单项 MenuStrip（下拉式菜单） 弹出下拉区别用法 常用对话框 颜色字体 打开文件 浏览对话框 (FolderBrowserDialog ) （模式对话框） showdialog（显示方式）OpenFileDialog [FileNames 获取对话框中所有选定文件的文件名(从 FileDialog 继承)]SaveFileDialog 、 FolderBrowserDialog 、FontDialog、ColorDialog都是模式对话框， 鼠标 当鼠标指针在窗体或控件上移动时将触发MouseMove事件，当鼠标指针悬停在窗体或控件上时将触发MouseHover事件。 MouseDown 和MouseUp事件 MouseWheel事件（滚轮） （MouseClick 和 MouseDoubleClick）Cursor属性设计鼠标指针。 键盘操作 KeyPress if (e.KeyChar == (Char)Keys.Back） if (e.KeyChar == ‘A’） KeyDown和KeyUp KeyDown和KeyUp事件中，一般通过KeyCode和KeyValue来获取用户按键 目录相关：Directory类DirectoryInfo类（前者静态类 后者使用时必须实例化）（若只有一个操作用directory 要多次使用一个对象用后者） 1.创建一个目录：CreateDirectory 2.删除一个目录：Delete 3.获取当前目录： GetCurrentDirectory 4.获取当前目录下的所有子目录：GetDirectories 5.获取目录下的文件：GetFiles 文件相关 File 和FileInfo类FileMode： Append：向文件中追加数据。 Create：新建文件，如果同名文件已经存在，新建文件将覆盖该文件。（对文件的操作） CreateNew：新建文件，如果同名文件已经存在，则引发异常FileAccess: Read ReadWrite WriteFileStream类： CanRead，CanWrite Close Read ReadByte Write WriteByte Flush（刷新 将缓存区文件写入文件中） 创建：Create 删除：Delete 拷贝：Copy 移动：Move 打开:Open 判断文件是否存在：ExistsStreamReader类及StreamWriter类为用户提供了按文本模式读写数据的方法 （应用更加广泛）StreamReader 里方法 Read ReadLine ReadToEndStreamWrite 里方法 Write WriteLine 错误类型 运行时错误 逻辑错误 语法错误异常处理 Try Catch Finally 自定义异常抛出 throw处理步骤 （1）定义异常：分为系统定义和用户定义。 （2）引发异常：分为自动引发和显式引发。 （3）处理异常：分为系统处理和用户自定义处理 socket 建立连接的基本过程 服务器监听 客户端请求 连接确认 Listen 服务端使用 Accept 服务端使用，阻塞模式 Send 发送数据 Receive 接收数据 Connect客户端使用，阻塞模式 thread 优先级五种 Lowest, BelowNormal, Normal, AboveNormal, Highest 如何设置优先级ThreadPriority . Normallock关键字 锁定线程不被中断 实现线程同步 如何启用多线程运行一个方法： Thread th1 = new Thread(thst1); th1.Start(）;th1.Abort（);th1.Join(); 命名空间：using System.Threading; 数据库 如果要使用数据库的五大对象 联机模式 三个 脱机模式四个 command connection 公用如果给一个数据库的名字 设置连接字符 定义connection对象 连上他 用select读出来 会查询就Ok了引入命名空间using System.Data.SqlClient;查询 Select *From student Where 成绩&gt;=60 and 成绩&lt;70;DataGridView控件 假设数据库服务器的名称为“MYSQLSERVER”，服务器的登录名和密码使用系统用户名和密码，则连接数据库MyDatabase并显示表student中数据的代码如下：private void button1_Click(object sender, EventArgs e){//设置连接字符串string ConnectionString = @”Data Source=(local)\\MYSQLSERVER;InitialCatalog=MyDatabase;” + “Integrated Security=True”;DataSet dataset = new DataSet(); //创建数据集//创建一个新连接SqlConnection conn = new SqlConnection(ConnectionString)五大对象： (1) Connection（连接），用来建立与特定数据源的连接。 (2) Command（命令），用来对数据源执行SQL命令语句或存储过程。 (3) DataReader（数据阅读器），用来从数据源中获取只读、向前的数据流。 (4) DataAdapter（数据适配器），用来在数据源和数据集之间交换数据。 (5) DataSet（数据集），用来处理从数据源读出的数据，表示数据在内存中的缓存联机模式：1,2,3脱机模式：1,2,4,5 泛型部分 基本泛型约束 约束是使用 where 上下文关键字指定 where T： struct 类型参数必须是值类型。 class 类型参数必须是引用类型，包括任何类、接口、委托或数组 new() 类型参数必须具有无参数的公共构造函数。当与其他约束一起使用时，new() 约束必须最后指定类型 基类名 类型参数必须是指定的基类或派生自指定的基类 接口名称 类型参数必须是指定的接口或实现指定的接口。可以指定多个接口约束。约束接口也可以是泛型的泛型相当于一个值类型不同的通用代码模板 GDI+ 线圆椭圆 两个点画 那几个方法System.Drawing DrawLine( Pen pen, int x1, int y1,int x2, int y2 );：画直线 DrawLiness( Pen pen, Point[ ] pts );：画线 Pen pen = new Pen(Color.Black, 3);Point[] points = { new Point( 10, 10),new Point( 10, 100),new Point(200, 50),new Point(250, 120)};e.Graphics.DrawLines(pen, points); } DrawEllipse (Pen pen, int x, int y, int width, int height) 画椭圆 width=height时是圆DrawRectangle(Pen pen, int x, int y, int width, int height)画矩形填充的Draw-&gt;Fill","categories":[],"tags":[]},{"title":"","slug":"my-first-blog","date":"2019-03-21T11:55:22.266Z","updated":"2019-03-27T09:02:37.067Z","comments":true,"path":"2019/03/21/my-first-blog/","link":"","permalink":"http://yoursite.com/2019/03/21/my-first-blog/","excerpt":"title: C#部分内容date: 2019-03-21 19:55:22tags:C#content:","text":"title: C#部分内容date: 2019-03-21 19:55:22tags:C#content:数组一维数组 int[] array=new int[]{}二维数组 int[,] array=new int[,]{}交错数组 int[][] jagarray=new int [3][]; jagarray[0] =new int[5]; jagarray[1] =new int[3]; jagarray[2] =new int[4];方法: a.Length // 计算数组长度 Random //生成随机数组 ex: Random r =new Random() r.Next(1,100) //生成1-99的随机整数 foreach (类型 in 数组) { 体 } 类型转换1.隐式转换 short s=1; int i=s; 隐式转换无法完成由高精度的数据类型向低精度的数据类型进行转换 int i =1; short s=i;2.显示转换float a=3.5f;int i=(int)(a+5.1) 3.使用方法进行数据类型的转换ex：(1)int i = int.Parse(“100”) int a; int i =int.Parse(Console.ReadLine(a)); ReadLine默认输入类型为字符串 //int.Parse只可以转换符合整形格式的字符串 (2)Convert 类 ToInt32,Tochar,ToBoolean int m= Convert.ToInt32(Console.ReadLine(a)); (3)ToString方法 ex: int n=97; string t=Convert.ToChar(n).ToString() //t=’a’ •如果希望父类某个方法的实现能够在子类中进一步得到改进，那么 将父类的该方法定义为虚方法，使用virtual关键字定义虚方法•如果希望改进父类的某个虚方法，使用override关 键字覆盖父类的方法，提供自己的实现就可以了•当覆盖虚方法时，覆盖的方法必须与被覆盖的方法具有相同的方法签名•抽象类只能作为其它类的基类，它不能直接被实例化 类的默认修饰符 internal 四种类型的参数 ● 值参数（传值 不影响实参的值） ● 引用参数（传地址 参数用ref修饰 影响实参的值 需要初始化赋值） ● 输出参数（传地址 参数用out修饰 无需初始化赋值） ● 参数数组（用params修饰符定义的参数称为参数数组，它允许向函数传递个数可变的参数。Void MutiParams( params int[ ] var ) 不可与ref out合用继承 baseC#支持两种多态性:编译时多态性，是在程序编译时就决定如何实现某一动作，是通过方法重载和运算符重载实现的。是运行时多态性，是在运行时动态实现某一动作，是通过继承和虚成员实现的。abstract抽象interface接口delegate委托 •抽象类abstract class Vehicle//定义汽车类{public int wheels;//公有成员 轮子个数protected float weight;//保护成员 重量public Vehicle(int w,float g){wheels = w;weight = g;}public virtual void Speak(){Console.WriteLine(“the w vehicle is speaking!”); class Car:Vehicle //定义轿车类{int passengers;//私有成员 乘客数public Car(int w,float g,int p) : base(w,g){passengers = p;}public override void Speak(){Console.WriteLine(“The car is speaking:Di-di!”);} 窗体• 1. 标签Label• 2. 文本框TextBox• 3. 按钮Button• 4. 单选按钮RadioButton和复选框CheckBox• 5. 列表框ListBox• 6. 组合框ComboBox• 7. 图片框PictureBox常用控件特有属性：（1）Checked：单选按钮RadioButton和复选框CheckBox中标识该单选按钮或复选框是否被选中。（2）Image：用于设置PictureBox控件中显示的图片。比如设置PictureBox控件的Image属性，其格式为：图片框名.Image =Image.FromFile(“文件路径”);（3）SelectedItem：列表框中所选择项中的最上面一项。比如：将列表框中中所选择项的最上面一项值赋给str：string str = (string)listBox1.SelectedItem;（4）SelectedItems：列表框中的所有项例如：读取列表框中所有被选中项 string str； str = “”; foreach (object t in listBox1.SelectedItems){str = str + (string)t；} 共有事件：（1）Click事件：鼠标单击时会触发该事件。特有事件：（1）TextChanged：TextBox本文内容发生改变时触发。（2）CheckedChanged：单选按钮和复选框状态改变触发的事件。（3）CheckStateChanged：复选框状态改变触发的事件。注意：当复选框的Checked属性值改变后，触发CheckedChang事件；当单击单选复选框时，触发Click事件；当复选框的CheckState属性值改变后，触发CheckStateChanged事件。每次单击复选框时，都会触发CheckStateChanged和Click事件，但不会每次都触发CheckedChanged事件。当复选框的状态在“选中”和“不确定”之间切换时，Checked属性值不变（值为true），此时不会触发CheckedChanged事件。当三个事件都触发时，触发的次序为：CheckedChanged、CheckStateChanged、Click。（4）SelectedIndexChanged：列表框和组合框中的选中项发生改变时触发该事件 方法（1）文本框的常用方法：clear()，清除文本框中的内容 • 工具栏ToolStrip• 状态栏StatusStrip 通用对话框• OpenFileDialog：打开文件对话框• SaveFileDialog：保存文件对话框• FontDialog：字体对话框• ColorDialog：颜色对话框 常用属性（1）FileName：打开文件的路径常用方法（1）ShowDialog：显示对话框例如，调用打开文件对话框将对话款中选择的文件路径取出：if (openFileDialog1.ShowDialog() == DialogResult.OK){string info = openFileDialog1.FileName}； • 常用属性（1）Font：设置的字体信息（2）Color：设置的颜色信息例如，将textBox1控件的字体和颜色设置为字体对话框中选的字体和颜色：if (fontDialog1.ShowDialog() == DialogResult.OK){textBox1.Font = fontDialog1.Font;textBox1.ForeColor = fontDialog.Color} （1）Color：设置的颜色信息例如，将Textbox1的前景颜色设置为颜色对话框中选择的颜色。if (colorDialog1.ShowDialog() == DialogResult.OK) {textBox1.ForeColor = colorDialog1.Color}","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2019-03-21T11:30:54.173Z","updated":"2019-03-21T11:30:54.174Z","comments":true,"path":"2019/03/21/hello-world/","link":"","permalink":"http://yoursite.com/2019/03/21/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}]}